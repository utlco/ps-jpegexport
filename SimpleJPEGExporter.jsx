#target photoshopconst DEFAULT_JPEG_QUALITY = 75;const DEFAULT_MAX_IMAGE_SIZE = 1920;const KEY_EXPORT_FOLDER = app.stringIDToTypeID('exportFolder');const KEY_JPEG_QUALITY = app.stringIDToTypeID('jpegQuality');const KEY_MAX_IMAGE_SIZE = app.stringIDToTypeID('maxImageSize');const KEY_CLOSE_AFTER_EXPORT = app.stringIDToTypeID('closeAfterExport');const SETTINGS_KEY = 'utlcoSimpleJPEGExporter';/**  @constructor Constructor. */function SimpleJPEGExporter(){  this.windowRef = null;  this.setDefaultOptions();  this.getOptions();}/** *  Set options to default values. */SimpleJPEGExporter.prototype.setDefaultOptions = function() {  this.jpegQuality = DEFAULT_JPEG_QUALITY;  this.maxImageSize = DEFAULT_MAX_IMAGE_SIZE;  this.closeAfterExport = false;  this.closeCopyAfterExport = true;}/** *  Persist this dialog's current option values. */SimpleJPEGExporter.prototype.putOptions = function() {  var desc = new ActionDescriptor();  desc.putString(KEY_EXPORT_FOLDER, this.exportFolder.fullName);  desc.putInteger(KEY_JPEG_QUALITY, this.jpegQuality);  desc.putInteger(KEY_MAX_IMAGE_SIZE, this.maxImageSize);  app.putCustomOptions(SETTINGS_KEY, desc);//  Window.alert('Saved settings.');}/** *  Fetch this dialog's previous option values. */SimpleJPEGExporter.prototype.getOptions = function() {  try {    var desc = app.getCustomOptions(SETTINGS_KEY);    this.exportFolder = Folder(desc.getString(KEY_EXPORT_FOLDER));    if (desc.hasKey(KEY_JPEG_QUALITY))      this.jpegQuality = desc.getInteger(KEY_JPEG_QUALITY);    if (desc.hasKey(KEY_MAX_IMAGE_SIZE))      this.maxImageSize = desc.getInteger(KEY_MAX_IMAGE_SIZE);    if (desc.hasKey(KEY_CLOSE_AFTER_EXPORT))      this.closeAfterExport = desc.getBoolean(KEY_CLOSE_AFTER_EXPORT);  } catch (e) {    // ignore - will use defaults...    this.exportFolder = app.activeDocument.path;    this.setDefaultOptions();  }}/** *  Reset this dialog's current options to default values. */SimpleJPEGExporter.prototype.resetOptions = function() {  try {    this.setDefaultOptions();    app.eraseCustomOptions(SETTINGS_KEY);  } catch (e) {    // ignore...  }}/** *  Do the actual work */SimpleJPEGExporter.prototype.doit = function() {//  var doExport = Window.confirm( 'Export Settings' +//      '\nExport folder: ' + Folder.decode(this.exportFolder.fsName) +//      '\nJPEG quality: ' + this.jpegQuality +//      '\nMax size: ' + this.maxImageSize +//      '\n\nProceed?'//  );//  if (doExport) {//    this.exportAll();//  }  this.exportAll();}SimpleJPEGExporter.prototype.exportAll = function(){  // Save current prefs and settings to restore later  var originalRulerUnits = preferences.rulerUnits;  var originalBgColor = app.backgroundColor;  var originalActiveDoc = app.activeDocument;  var originalDisplayDialogs = app.displayDialogs;  app.displayDialogs = DialogModes.NO;  preferences.rulerUnits = Units.PIXELS;  var jpegQuality = Math.round(12 * (this.jpegQuality / 100.0));  var numDocs = app.documents.length;  for (var docIndex = 0; docIndex < numDocs; docIndex++) {    var currentDocument = app.documents[docIndex];    app.activeDocument = currentDocument;    // Make a temporary copy of the current active document.    var docCopy = currentDocument.duplicate('untitled', true);    var destFile = this.exportFolder.fullName + '/' + currentDocument.name;//    Window.alert('destFile: ' + File.decode(destFile));    this.exportJPEG(docCopy, destFile, this.maxImageSize, jpegQuality, null);    if (this.closeCopyAfterExport) {      docCopy.close(SaveOptions.DONOTSAVECHANGES);    }    if (this.closeAfterExport) {      currentDocument.close();    }  }  // Restore prefs and document settings  preferences.rulerUnits = originalRulerUnits;  app.activeDocument = originalActiveDoc;  app.backgroundColor = originalBgColor;  app.displayDialogs = originalDisplayDialogs;}SimpleJPEGExporter.prototype.exportJPEG = function(    doc, destFile, maxSize, quality, bgColor){  var resampleMethod = ResampleMethod.BICUBICSHARPER;                     // Default for reducing size  var aspectRatio = doc.width / doc.height;  var width = maxSize;  var height = maxSize;  var scaleFactor = 1.0;  // Make the image JPEG friendly.  doc.flatten();  doc.changeMode(ChangeMode.RGB);  doc.convertProfile("sRGB IEC61966-2.1", Intent.PERCEPTUAL, true, false);  doc.bitsPerChannel = BitsPerChannelType.EIGHT;  // Resize image retaining aspect ratio  if (aspectRatio < 1.0) {                                                                        // Vertically oriented images ?    scaleFactor = maxSize / doc.height;                                             // calculate vertical scale factor    width = doc.width * scaleFactor;                                                // to resize width preserving aspect ratio  } else {                                                                                                        // Otherwise is horizontal    scaleFactor = maxSize / doc.width;                                              // Calculate horizontal scale factor    height = doc.height * scaleFactor;  }  if (scaleFactor > 1.0) {    // Use smooth interpolation for enlarging    resampleMethod = ResampleMethod.BICUBICSMOOTHER;  }  doc.resizeImage(width, height, 72, resampleMethod);  // If a background color is specified then resize the canvas to maxSize square  // letterboxing the image with the background color  if (bgColor) {    rgb = new RGBColor();    rgb.hexValue = bgColor;    solidcolor = new SolidColor();    solidcolor.rgb = rgb;    app.backgroundColor = solidcolor;    doc.resizeCanvas(maxSize, maxSize);  }  // Save as JPEG  var jpgFile = new File(destFile);  jpgOptions = new JPEGSaveOptions();  jpgOptions.embedColorProfile = true;  jpgOptions.formatOptions = FormatOptions.STANDARDBASELINE;  jpgOptions.matte = MatteType.NONE;  jpgOptions.quality = quality;  doc.saveAs(jpgFile, jpgOptions, true, Extension.LOWERCASE);}/** * Build the dialog UI and controls. */SimpleJPEGExporter.prototype.buildDialog = function() {  var dlgResource =    'dialog { text:"Resize and Export JPEGs",' +      'folderGrp: Group {' +        'alignment: "left",' +        'orientation: "column",' +        'folderPath: StaticText { alignment:"left", text:"" },' +        'folderBtn: Button { alignment:"left", text:"Choose Export Folder"},' +      '}' +      'settingsPnl: Panel {' +        'text: "Settings",' +        'alignment: "left",' +        'orientation: "column",' +        'jpgGrp: Group { ' +          'alignment:"right",' +          'labelTxt: StaticText { text: "JPEG quality:" },' +          'jpqQGrp: Group {' +            'alignment: "left",' +            'size: [300, 30],' +            'jpgQuality: EditText { text: "", characters: 4 },' +            'jpgSlider: Slider { minvalue: 10, maxvalue: 100, value: 75 },' +          '}' +        '}' +        'sizeGrp: Group {' +          'alignment:"right",' +          'labelTxt: StaticText { text: "Max image size:" },' +          'sizeSubGrp: Group {' +            'alignment: "left",' +            'size: [300, 30],' +            'maxSize: EditText { text: "1920", characters: 4 },' +          '}' +        '}' +        'resetGrp: Group {' +          'alignment:"right",' +          'labelTxt: StaticText { text: "" },' +          'resetBtn: Button { text: "Default Values" },' +        '}' +      '}' +      'okGrp: Group {' +        'alignment: "right",' +        'cancelBtn: Button {text: "Cancel"},' +        'okBtn: Button {text: "OK"},' +      '}' +    '}';  win = new Window(dlgResource);  // Create shortcuts to relevant GUI widgets.  this.guiFolderBtn = win.folderGrp.folderBtn;  this.guiFolderPath = win.folderGrp.folderPath;  this.guiCancelBtn = win.okGrp.cancelBtn;  this.guiOkBtn = win.okGrp.okBtn;  this.guiMaxSize = win.settingsPnl.sizeGrp.sizeSubGrp.maxSize;  this.guiJpgQuality = win.settingsPnl.jpgGrp.jpqQGrp.jpgQuality;  this.guiJpgSlider = win.settingsPnl.jpgGrp.jpqQGrp.jpgSlider;  this.guiResetBtn = win.settingsPnl.resetGrp.resetBtn;  // Initialize widget values  this.guiFolderPath.text = Folder.decode(this.exportFolder.fsName);  this.guiJpgQuality.text = this.jpegQuality + '%';  this.guiJpgSlider.value = this.jpegQuality;  this.guiMaxSize.text = String(this.maxImageSize);  this.windowRef = win;  return this.windowRef;}SimpleJPEGExporter.prototype.initEventHandlers = function() {  // Cache this scope to make it visible to event handlers.  outerThis = this;  this.guiFolderBtn.onClick = function() {    folder = outerThis.exportFolder.selectDlg('Choose export folder');    outerThis.guiFolderPath.text = Folder.decode(folder.fsName);    outerThis.exportFolder = folder;  };  this.guiJpgSlider.onChanging = function() {    var val = Math.round(this.value);    outerThis.guiJpgQuality.text = val + '%';    outerThis.jpegQuality = val;  };  this.guiJpgQuality.onChange = function() {    var val = parseInt(this.text);    if (isNaN(val)) {      val = outerThis.jpegQuality;    }    val = Math.max(Math.min(100, val), 10);    this.text = val + '%';    outerThis.guiJpgSlider.value = val;    outerThis.jpegQuality = val;  };  this.guiMaxSize.onChange = function() {    var val = parseInt(this.text);    if (isNaN(val)) {      val = outerThis.maxImageSize;    }    val = Math.max(val, 1);    this.text = String(val);    outerThis.maxImageSize = val;  }  this.guiResetBtn.onClick = function() {    outerThis.setDefaultOptions();    outerThis.guiJpgSlider.value = outerThis.jpegQuality;    outerThis.guiJpgQuality.text = outerThis.jpegQuality + '%';    outerThis.guiMaxSize.text = String(outerThis.maxImageSize);  }  this.guiCancelBtn.onClick = function() {    outerThis.windowRef.close();  }  this.guiOkBtn.onClick = function() {    // Save current settings    outerThis.putOptions();    // Do the export    outerThis.doit();    outerThis.windowRef.close();  }}/**@return True if the snippet ran as expected, false  otherwise.@type Boolean*/SimpleJPEGExporter.prototype.run = function() {  this.buildDialog();  this.initEventHandlers();  this.windowRef.show();  return true;}/** "main program": construct an anonymous instance and run it  as long as we are not unit-testing this snippet.*/if (typeof(SimpleJPEGExporter_unitTest) == "undefined") {    new SimpleJPEGExporter().run();}